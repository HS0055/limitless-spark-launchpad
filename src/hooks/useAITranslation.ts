import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface AITranslationOptions {
  text: string;
  targetLanguage: string;
  sourceLanguage?: string;
  context?: string;
  pagePath?: string;
}

interface AITranslationResult {
  translatedText: string;
  cached: boolean;
  aiGenerated?: boolean;
  quality?: {
    score: number;
    feedback: string;
  };
}

interface ContentAnalysisOptions {
  htmlContent: string;
  pagePath?: string;
  targetLanguages?: string[];
}

interface ContentAnalysisResult {
  detectedTexts: number;
  missingTranslations: number;
  autoTranslations: number;
  analysis: {
    totalTexts: any[];
    missing: any[];
    autoGenerated: any[];
  };
}

export const useAITranslation = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const translateWithAI = async (options: AITranslationOptions): Promise<AITranslationResult> => {
    setLoading(true);
    setError(null);

    try {
      const { data, error } = await supabase.functions.invoke('ai-smart-translate', {
        body: options
      });

      if (error) throw error;
      return data;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Translation failed';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const analyzeContent = async (options: ContentAnalysisOptions): Promise<ContentAnalysisResult> => {
    setLoading(true);
    setError(null);

    try {
      const { data, error } = await supabase.functions.invoke('ai-content-detector', {
        body: options
      });

      if (error) throw error;
      return data;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Content analysis failed';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const optimizeTranslations = async (mode: 'analyze' | 'optimize' | 'consistency-check', options: any = {}) => {
    setLoading(true);
    setError(null);

    try {
      const { data, error } = await supabase.functions.invoke('ai-translation-optimizer', {
        body: { mode, ...options }
      });

      if (error) throw error;
      return data;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Optimization failed';
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const batchTranslate = async (texts: string[], targetLanguage: string, options: Partial<AITranslationOptions> = {}) => {
    const results = [];
    
    for (const text of texts) {
      try {
        const result = await translateWithAI({
          text,
          targetLanguage,
          ...options
        });
        results.push({ text, result });
      } catch (err) {
        results.push({ text, error: err instanceof Error ? err.message : 'Translation failed' });
      }
    }

    return results;
  };

  return {
    translateWithAI,
    analyzeContent,
    optimizeTranslations,
    batchTranslate,
    loading,
    error
  };
};